<!doctype html>
<html lang="es">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Calendario</title>
  <link rel="icon" href="/img/favicon.ico" type="image/x-icon">
  <!-- bootstrap -->
  <link rel="stylesheet" href="/css/bootstrap-icons.css">
  <!-- custom -->
  <link rel="stylesheet" href="/css/estilos.css">
  <link rel="stylesheet" href="/css/navbar.css">
  <link rel='stylesheet' href='/css/js-year-calendar.css'>
</head>

<body class="antialiased">
  <div class="wrapper">
    <%- include('../../partials/header') %>
    <%- include('../../partials/navbar', {opcion: 'CALENDARIO' }) %>
    <div class="page-wrapper">
      <div class="page-body">
        <div class="container-xl">
          <div class="row">
            <div class="col-12">
              <div class="card mt-1">
                <% if(typeof alerts !='undefined' ) { %>
                <% alerts.map(function (alert){ %>
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                  <%- alert.msg %>
                </div>
                <% }) %>
                <% } %>
                <form action="/admin/calendarios/calendario" method="POST">
                  <div class="card-header">
                    <h3 class="card-title">Calendario</h3>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-2">
                        <div class="mb-1">
                          <div class="form-label">Año</div>
                          <select class="form-select" id="cboyea" value="">
                            <option value="<%- new Date().getFullYear() %>">
                              <%- new Date().getFullYear() %>
                            </option>
                            <option value="<%- new Date().getFullYear() +1 %>">
                              <%- new Date().getFullYear() +1 %>
                            </option>
                          </select>
                        </div>
                      </div>
                      <div class="col-3">
                        <div class="mb-1">
                          <div class="form-label">Oficina</div>
                          <select class="form-select" id="cboofi" name="ofiusu" value="">
                            <% datos.oficinas.map(element=> { %>
                            <option value="<%- element.IDOFIC %>" <%- element.IDOFIC === user.oficina ? "selected":"" %>>
                              <%- element.DESOFI %>
                            </option>
                            <% }) %>
                          </select>
                        </div>
                      </div>
                      <div class="col-4">
                        <div class="mb-1">
                          <div class="form-label">Usuario</div>
                          <select class="form-select" id="cbousu" value="">
                          </select>
                        </div>
                      </div>
                      <div class="col-3">
                        <div class="mb-1">
                          <div class="form-label">Estado</div>
                          <select class="form-select" id="cboest" value="">
                            <option value="0" data-foo="" selected>
                              SELECCIONE ESTADO
                            </option>
                            <% datos.arrTiposEstado.map(element=> { %>
                            <option value="<%- element.ID %>" data-foo="<%- element.COLOR %>">
                              <%- element.DES %>
                            </option>
                            <% }) %>
                          </select>
                        </div>
                      </div>
                    </div>
                    <div id="calendar"></div>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="modal modal-blur fade" id="modal-horas" tabindex="-1" role="dialog" aria-hidden="true">
      <div class="container-xl">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title mt-0">Horas bolsa</h5>
              <button type="button" class="btn-close btn-x-horas" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="card-body">
                <div class="row">
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="input-control">
                        <div class="form-label">Desde</div>
                        <input type="date" id="desfec" name="desfec" class="form-control">
                        <div class="invalid-feedback"></div>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="input-control">
                        <div class="form-label">Hasta</div>
                        <input type="date" id="hasfec" name="hasfec" class="form-control">
                        <div class="invalid-feedback"></div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="form-label">Desde hora</div>
                      <input type="time" id="deshor" name="deshor" class="form-control" min="08:00" max="20:00">
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="form-label">Hasta hora</div>
                      <input type="time" id="hashor" name="hashor" class="form-control" min="08:00" max="20:00">
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-link" id="btnHorasCancel" data-bs-dismiss="modal" aria-label="Close">Cancelar</button>
              <button type="button" class="btn btn-primary ms-auto" onclick="eventoRango()">Aceptar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="modal modal-blur fade" id="modal-tele" tabindex="-1" role="dialog" aria-hidden="true">
      <div class="container-xl">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title mt-0">Atención telefónica</h5>
              <button type="button" class="btn-close btn-x-tele" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="card-body">
                <div class="row">
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="input-control">
                        <div class="form-label">Desde</div>
                        <input type="date" id="desfectel" name="desfectel" class="form-control">
                        <div class="invalid-feedback"></div>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="input-control">
                        <div class="form-label">Hasta</div>
                        <input type="date" id="hasfectel" name="hasfectel" class="form-control">
                        <div class="invalid-feedback"></div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="form-label">Desde hora</div>
                      <input type="time" id="deshortel" name="deshortel" class="form-control" min="08:00" max="20:00">
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="form-label">Hasta hora</div>
                      <input type="time" id="hashortel" name="hashortel" class="form-control" min="08:00" max="20:00">
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-link" id="btnTeleCancel" data-bs-dismiss="modal" aria-label="Close">Cancelar</button>
              <button type="button" class="btn btn-primary ms-auto" onclick="eventoRango()">Aceptar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="modal modal-blur fade" id="modal-forma" tabindex="-1" role="dialog" aria-hidden="true">
      <div class="container-xl">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title mt-0">Formación</h5>
              <button type="button" class="btn-close btn-x-forma" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="card-body">
                <div class="row">
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="input-control">
                        <div class="form-label">Desde</div>
                        <input type="date" id="desfecfor" name="desfecfor" class="form-control">
                        <div class="invalid-feedback"></div>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="input-control">
                        <div class="form-label">Hasta</div>
                        <input type="date" id="hasfecfor" name="hasfecfor" class="form-control">
                        <div class="invalid-feedback"></div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="form-label">Desde hora</div>
                      <input type="time" id="deshorfor" name="deshorfor" class="form-control" min="08:00" max="20:00">
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="mb-1">
                      <div class="form-label">Hasta hora</div>
                      <input type="time" id="hashorfor" name="hashorfor" class="form-control" min="08:00" max="20:00">
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-link" id="btnFormaCancel" data-bs-dismiss="modal" aria-label="Close">Cancelar</button>
              <button type="button" class="btn btn-primary ms-auto" onclick="eventoRango()">Aceptar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="modal modal-blur fade" id="modal-evnts" tabindex="-1" role="dialog" aria-hidden="true">
      <div class="container-xl">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title mt-0">Eventos</h5>
              <button type="button" class="btn-close btn-x-evnts" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="card-body">
                  <table class="table table-vcenter table-striped" id="tblEventos">
                    <thead>
                      <tr class="header">
                        <th class="w-4"></th>
                        <th>Evento</th>
                      </tr>
                    </thead>
                    <tbody id="table-body">
                    </tbody>
                  </table>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-link" id="btnEventCancel" data-bs-dismiss="modal" aria-label="Close">Cancelar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  <div class="modal modal-blur fade" id="modal-borrar" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
      <div class="modal-content">
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        <div class="modal-status bg-danger"></div>
        <div class="modal-body text-center py-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="icon mb-2 text-danger icon-lg" width="24" height="24"
            viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
            stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M12 9v2m0 4v.01"></path>
            <path d="M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75"></path>
          </svg>
          <h3>¿Desea borrar este evento?</h3>
          <div id="msgbor"></div>
          <div class="text-muted">Lo que vas a hacer no puede ser recuperado.</div>
        </div>
        <div class="modal-footer">
          <div class="w-100">
            <div class="row">
              <div class="col">
                <a href="#" class="btn btn-white w-100" data-bs-dismiss="modal">Cancelar</a>
              </div>
              <div class="col">
                <form action="/admin/calendarios" method="POST">
                  <input type="hidden" id="idesta" name="idesta" value="">
                  <button type="submit" class="btn btn-danger w-100" id="btnDelete">Borrar evento</button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

    <%- include('../../partials/footer') %>
  </div>

  <script src="/js/ayuda.min.js"></script>
  <script src="/js/js-year-calendar.js"></script>
  <script src="/js/js-year-calendar.es.js"></script>
  <script>
    async function insertEvento(evento) {
      let xhr = new XMLHttpRequest()

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {
              const result = JSON.parse(xhr.response)

              resolve(result)
            }
          }
        }

        xhr.open('POST', 'http://localhost:8200/api/estados/insert', true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify(evento))
      })
    }
    async function insertRangoEvento(evento) {
      let xhr = new XMLHttpRequest()

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {
              //resolve(evento)
              if (evento.estado.TIPEST === <%- datos.tiposEstado.horas.ID %>) {
                document.getElementById('modal-horas').style.display = 'none'
              } else if (evento.estado.TIPEST === <%- datos.tiposEstado.telefono.ID %>) {
                document.getElementById('modal-tele').style.display = 'none'
              } else if (evento.estado.TIPEST === <%- datos.tiposEstado.formacion.ID %>) {
                document.getElementById('modal-forma').style.display = 'none'
              }  

              estadosUsuario()
            }
          }
        }

        xhr.open('POST', 'http://localhost:8200/api/estados/inserts', true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify(evento))
      })
    }
    async function deleteEvento(evento) {
      const xhr = new XMLHttpRequest()

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {                
              resolve(evento)
            }
          }
        }

        xhr.open('POST', 'http://localhost:8200/api/estados/delete', true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify(evento))
      })
    }
    async function getEstadosWithPromise(prms) {
      var xhr = new XMLHttpRequest();

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {
              resolve(JSON.parse(xhr.response))
            }
          }
        }

        xhr.open('POST', 'http://localhost:8200/api/estados/usuarios', true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8')
        xhr.send(JSON.stringify(prms))
      })
    }
    async function estadosUsuario() {
      const prms = {
        idofic: params.oficina,
        usuest: params.usuario,
        tipest: 0,
        desde: params.desde,
        hasta: params.hasta,
      }
      estados = await getEstadosWithPromise(prms)
      getEstadosTipo(params.tipo)
    }
    const dateISOToUTCString = (dateISO) => {
      const fecha = new Date(dateISO)
      const userTimezoneOffset = fecha.getTimezoneOffset() * 60000;

      return new Date(fecha.getTime() - userTimezoneOffset).toISOString().slice(0, 10);
    }
    const setSuccess = (element) => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.invalid-feedback');

      errorDisplay.innerText = '';
      inputControl.classList.add('is-valid');
      element.classList.remove('is-invalid');
    }
    const setError = (element, message) => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.invalid-feedback');

      errorDisplay.innerText = message;
      element.classList.add('is-invalid');
      inputControl.classList.remove('is-valid');
    }
    const isInRange = (value,range) => {
      return (value >= range[0] && value <= range[1])
    }
    const eventoRango = async () => {
      const estado = {
        USUEST: params.usuario,
        TIPEST: params.tipo,
        OFIEST: params.oficina,
      }
      const movimiento = {
        USUMOV: <%- user.id %>,
        TIPMOV: <%- datos.tiposMovimiento.crearEstado %>
      }
      let deshor
      let hashor
      let element

      if (params.tipo === <%- datos.tiposEstado.horas.ID %>) {
        deshor = document.getElementById('deshor').value
        hashor = document.getElementById('hashor').value
        element = document.getElementById('desfec')

        estado.DESDE = document.getElementById('desfec').value
        estado.HASTA = document.getElementById('hasfec').value
      } else if (params.tipo === <%- datos.tiposEstado.telefono.ID %>) {
        deshor = document.getElementById('deshortel').value
        hashor = document.getElementById('hashortel').value
        element = document.getElementById('desfectel')

        estado.DESDE = document.getElementById('desfectel').value
        estado.HASTA = document.getElementById('hasfectel').value
      } else if (params.tipo === <%- datos.tiposEstado.formacion.ID %>) {
        deshor = document.getElementById('deshorfor').value
        hashor = document.getElementById('hashorfor').value
        element = document.getElementById('desfecfor')

        estado.DESDE = document.getElementById('desfecfor').value
        estado.HASTA = document.getElementById('hasfecfor').value
      }
      estado.DESHOR = `+00 ${deshor}:00`
      estado.HASHOR = `+00 ${hashor}:00`
      const evento = {
        estado,
        movimiento,
      }

      let haySolape = false
      let arrFechas = []

      // solapes
      for (let d = new Date(estado.DESDE); d <= new Date(estado.HASTA); d.setDate(d.getDate() + 1)) {
        estados.filter(itm => {
          if (itm.STRFEC === d.toISOString().slice(0,10)) {
            arrFechas.push(itm)
          }
        })
        if (arrFechas.length > 0) {
          arrFechas.every(element => {
            let rango = [element.DESHOR,element.HASHOR]
            if (isInRange(deshor, rango) || isInRange(hashor, rango)) {
              haySolape = true
              return false
            }
            return true
          });
        }
      }

      if (haySolape) {
        setError(element, `Solape de eventos el día ${estado.DESDE} ${deshor}`)
        setTimeout(function () {
          setSuccess(element)
        }, 3000)
      } else {
        // insert rango
        await insertRangoEvento(evento)
      }
    }
    const arrayFilterOficinas = (oficina) => {
      const trimmedData = orgList.filter(itm => itm.OFIUSU === parseInt(oficina))
      const myLista = trimmedData
      const cbo = document.getElementById('cbousu')
      cbo.innerHTML = "";

      myLista.map(itm => {
        const option = document.createElement('option')
        option.value = itm.IDUSUA
        option.text = itm.NOMUSU

        if (itm.IDUSUA === <%- user.id %>) {
          option.selected = true
        }

        cbo.appendChild(option)
      })
      params.usuario = document.getElementById('cbousu').value
      params.tipo = 0

      document.getElementById('cboest').selectedIndex = params.tipo
    }
    const getEstadosTipo = (tipo) => {
      // no mostrar traspasos
      const estadosTipo = tipo === 0 ? estados.filter(itm => itm.TIPEST !== <%- datos.tiposEstado.traspaso.ID %>) : estados.filter(itm => itm.TIPEST === 0 || itm.TIPEST === parseInt(tipo))
      let data = []

      estadosTipo.map(itm => {
        const estado = {
          idesta: itm.IDESTA,
          usuest: itm.USUEST,
          tipest: itm.TIPEST,
          id: itm.IDESTA,
          startDate: new Date(itm.STRFEC),
          endDate: new Date(itm.STRFEC),
          color: colores[itm.TIPEST].COLOR,
        }
        data.push(estado)
      })
      calendario.setDataSource(data)
    }
    const editEvento = (e) => {
      const fecha = dateISOToUTCString(e.date.toISOString())

      if (params.tipo === <%- datos.tiposEstado.horas.ID %>) {
        const modalHoras = document.getElementById('modal-horas')

        document.getElementById('desfec').value = fecha
        document.getElementById('hasfec').value = fecha
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "14:00"
        modalHoras.style.display = 'flex'
      } else if (params.tipo === <%- datos.tiposEstado.telefono.ID %>) {
        const modalTele = document.getElementById('modal-tele')

        document.getElementById('desfectel').value = fecha
        document.getElementById('hasfectel').value = fecha
        document.getElementById('deshortel').value = "08:30"
        document.getElementById('hashortel').value = "14:00"
        modalTele.style.display = 'flex'
      } else if (params.tipo === <%- datos.tiposEstado.formacion.ID %>) {
        const modalForma = document.getElementById('modal-forma')

        document.getElementById('desfecfor').value = fecha
        document.getElementById('hasfecfor').value = fecha
        document.getElementById('deshorfor').value = "08:30"
        document.getElementById('hashorfor').value = "14:00"
        modalForma.style.display = 'flex'
      }
    }
    const deleteMenuEvent = async (e) => {
      const evento = {
        estado: {
          IDESTA: e.idesta,
        },
        movimiento: {
          USUMOV: <%- user.id %>,
          TIPMOV: <%- datos.tiposMovimiento.borrarEstado %>
        }
      }

      // borrar
      await deleteEvento(evento).then(ret => {
        let dataSource = calendario.getDataSource()

        calendario.setDataSource(dataSource.filter(item => item.id != e.id));
      })
    }
  </script>
  <script>
    const orgList = <%- JSON.stringify(datos.usuarios) %>
    const colores = <%- JSON.stringify(datos.arrColoresEstado) %>

    let estados = null
    let calendario = null
    let currentYear = new Date().getFullYear()

    let params = {
      fecha: new Date().toISOString().slice(0, 10),
      oficina: <%- user.oficina %>,
      usuario: <%- user.id %>,
      tipo: 0,
      color: '',
      desde: dateISOToUTCString(`${currentYear}-01-01T00:00:00`),
      hasta: dateISOToUTCString(`${currentYear}-12-31T00:00:00`),
    }

    calendario = new Calendar("#calendar", {
      minDate: new Date(params.desde),
      maxDate: new Date(params.hasta),
      language: "es",
      enableContextMenu: true,
      mouseOnDay: function(e) {
        if (e.events.length > 0) {
          let content = '';

          for (let i in e.events) {
            content += colores[e.events[i].tipest].DES + '\n'
          }

          e.element.setAttribute('data-bs-trigger', 'hover')
          e.element.setAttribute('data-bs-toggle', 'popover')
          e.element.setAttribute('title', content)
        }
      },
      contextMenuItems: [{
        text: 'Borrar',
        click: deleteMenuEvent
      }]
    })
    calendario.setYear(currentYear)

    // eventos modal
    document.getElementById('btnTeleCancel').addEventListener('click', function() {
      document.getElementById('modal-tele').style.display = 'none'
    })
    document.getElementById('btnHorasCancel').addEventListener('click', function() {
      document.getElementById('modal-horas').style.display = 'none'
    })
    document.getElementById('btnFormaCancel').addEventListener('click', function () {
      document.getElementById('modal-forma').style.display = 'none'
    })
    document.getElementById('btnEventCancel').addEventListener('click', function () {
      document.getElementById('modal-evnts').style.display = 'none'
    })
    document.querySelector('.btn-x-horas').addEventListener('click', (e) => {
      document.getElementById('modal-horas').style.display = 'none'
    })
    document.querySelector('.btn-x-tele').addEventListener('click', (e) => {
      document.getElementById('modal-tele').style.display = 'none'
    })
    document.querySelector('.btn-x-forma').addEventListener('click', (e) => {
      document.getElementById('modal-forma').style.display = 'none'
    })
    document.querySelector('.btn-x-evnts').addEventListener('click', (e) => {
      document.getElementById('modal-evnts').style.display = 'none'
    })
    document.addEventListener('keydown', function(e) {
      const modalHoras = document.getElementById('modal-horas')
      const modalTele = document.getElementById('modal-tele')
      const modalForma = document.getElementById('modal-forma')
      const modalEvent = document.getElementById('modal-evnts')
      const keyCode = e.keyCode;

      if (keyCode === 27 && modalHoras.style.display === 'flex') {
        modalHoras.style.display = 'none'
      } else if (keyCode === 27 && modalTele.style.display === 'flex') {
        modalTele.style.display = 'none'
      } else if (keyCode === 27 && modalForma.style.display === 'flex') {
        modalForma.style.display = 'none'
      } else if (keyCode === 27 && modalEvent.style.display === 'flex') {
        modalEvent.style.display = 'none'
      }
    })

    // eventos form
    document.getElementById('cboyea').addEventListener('change', function() {
      currentYear = parseInt(document.querySelector("#cboyea").value)

      params.desde = dateISOToUTCString(`${currentYear}-01-01T00:00:00`)
      params.hasta = dateISOToUTCString(`${currentYear}-12-31T00:00:00`)

      calendario.setMinDate(new Date(params.desde));
      calendario.setMaxDate(new Date(params.hasta));
      calendario.setYear(currentYear)

      estadosUsuario()
    });
    document.getElementById('cboofi').addEventListener('change', function() {
      params.oficina = parseInt(this.value)

      arrayFilterOficinas(params.oficina)
      estadosUsuario()
    });
    document.getElementById('cbousu').addEventListener('change', function() {
      params.usuario = parseInt(this.value)

      estadosUsuario()
    });
    document.getElementById('cboest').addEventListener('change', function() {
      params.color = document.getElementById("cboest").options[document.getElementById("cboest").selectedIndex].getAttribute('data-foo')
      params.tipo = parseInt(this.value)

      estadosUsuario()
    });
    document.querySelector('#calendar').addEventListener('clickDay', async function(e) {
      // bloquear festivos
      if (e.element.classList.contains('domingo')) {
        return
      }

      // bloquear si no existe destino
      if (e.events.length === 0 && params.tipo === 0) {
        return
      }
      
      // evento por rango
      if (e.events.length === 0 &&
      (params.tipo === <%- datos.tiposEstado.horas.ID %> ||
      params.tipo === <%- datos.tiposEstado.telefono.ID %> ||
      params.tipo === <%- datos.tiposEstado.formacion.ID %>)) {
        editEvento(e)
        return
      }
      
      if (e.events.length) {
        if (e.events.length > 1) {
          const modalEvent = document.getElementById('modal-evnts')
          const tbl = document.getElementById("table-body")
          let innerT = ''

          tbl.innerHTML = innerT;
          // eventos
          for (let i = 0; i < e.events.length; i++) {
            innerT += `<tr>
              <!-- col1 -->
              <td class="w-4">
                <div class="py-1 align-items-center">
                  <a href="#" class="nav-link"
                    onclick="{document.getElementById('idesta').value ='${e.events[i].idesta}', document.getElementById('msgbor').innerHTML ='<p>${colores[e.events[i].tipest].DES}</p>'}"
                    data-bs-toggle="modal" data-bs-target="#modal-borrar">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-inline me-2" width="24" height="24" viewBox="0 0 24 24"
                      stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                      <path stroke-width=".8" fill="none"
                        d="M7.85 19.575q-.6 0-1.025-.425-.425-.425-.425-1.025v-12.1h-.975V5.4h3.6v-.675H15V5.4h3.6v.625h-.975V18.15q0 .6-.425 1.013-.425.412-1.025.412Zm9.125-13.55H7.05v12.1q0 .35.225.575.225.225.575.225h8.325q.3 0 .55-.25.25-.25.25-.55Zm-6.85 10.925h.625V8h-.625Zm3.15 0h.625V8h-.625ZM7.05 6.025V18.925 18.125Z" />
                    </svg>
                  </a>
                </div>
              </td>
              <!-- col2 -->
              <td>
                <div class="d-flex py-1 align-items-center">
                  <div class="flex-fill">
                    <div class="font-weight-medium">${colores[e.events[i].tipest].DES}</div>
                  </div>
                </div>
              </td>
            </tr>
            `
          }

          tbl.innerHTML += innerT;

          modalEvent.style.display = 'flex'
        } else if (e.events[0].id !== 0) {
          const evento = {
            estado: {
              IDESTA: e.events[0].idesta,
            },
            movimiento: {
              USUMOV: <%- user.id %>,
              TIPMOV: <%- datos.tiposMovimiento.borrarEstado %>
            }
          }

          // borrar
          await deleteEvento(evento).then(ret => {
            // actualiza dia calendario
            let dataSource = calendario.getDataSource()
            
            dataSource = dataSource.filter(itm => itm.idesta !== ret.IDESTA)
            calendario.setDataSource(dataSource, {
              preventRendering: false
            })

            // actualizar dia
            e.element.attributes.removeNamedItem("style")
          })
        }
      } else {
        params.fecha = dateISOToUTCString(e.date.toISOString())

        // solapes
        const result = estados.find(itm => itm.STRFEC === params.fecha)
        if (result) {
          e.element.setAttribute('data-bs-trigger', 'hover')
          e.element.setAttribute('data-bs-toggle', 'popover')
          e.element.setAttribute('title', 'Solape de eventos')
          return
        }

        const estado = {
          FECEST: params.fecha,
          USUEST: params.usuario,
          TIPEST: params.tipo,
          OFIEST: params.oficina,
          DESHOR: '+00 08:30:00',
          HASHOR: (params.tipo === <%- datos.tiposEstado.conciliacion.ID %>) ? '+00 09:30:00' : '+00 14:00:00',
        }
        const movimiento = {
          USUMOV: <%- user.id %>,
          TIPMOV: <%- datos.tiposMovimiento.crearEstado %>
        }
        const evento = {
          estado,
          movimiento,
        }
        
        // insertar
        await insertEvento(evento).then(ret => {
          // actualiza dia calendario
          let dataSource = calendario.getDataSource()
          const estado = {
            idesta: ret.idesta,
            usuest: ret.usuest,
            tipest: ret.tipest,
            id: ret.idesta,
            startDate: new Date(ret.fecest),
            endDate: new Date(ret.fecest),
            color: params.color,
          }
          dataSource.push(estado)
          calendario.setDataSource(dataSource, {
            preventRendering: false
          })

          // actualizar dia
          e.element.style.boxShadow = params.color + ' 0px -4px 0px 0px inset'
        })
      }
    })

    arrayFilterOficinas(params.oficina)
    estadosUsuario()
  </script>
</body>

</html>