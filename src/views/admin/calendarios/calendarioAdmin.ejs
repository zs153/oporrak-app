<!doctype html>
<html lang="es">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Calendario</title>
  <link rel="icon" href="/img/favicon.ico" type="image/x-icon">
  <!-- styles -->
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .calendar-header {
      border: none !important;
      margin-bottom: 0 !important;
    }
    .subtitulo {
      margin: 0;
      align-items: center;
      justify-content: center;
      color: #656d77;
      pointer-events: none;
      font-size: 0.8em;
    }
    .day {
      border: 1px solid #e6e8e9 !important;
    }
    .new, .old {
      border: none !important;
    }
    .calendar table.month th.day-header {
      font-size: 0.75rem;
      color: #616876;
    }
  </style>
</head>

<body class="antialiased">
  <div class="wrapper">
    <%- include('../../partials/header') %>
    <%- include('../../partials/navbar', {opcion: 'CALENDARIO' }) %>
    <div class="page-wrapper">
      <div class="page-body">
        <div class="container-xl">
          <div class="row">
            <div class="col-12">
              <div class="card">
                <form action="/admin/calendarios/updateAdmin" method="POST" onclick="return confirm();">
                  <input type="hidden" name="usuario" id="usuario" value="<%= JSON.stringify(datos.usuario) %>" />
                  <input type="hidden" name="eventos" id="eventos" value="" />
                  <div class="card-header p-2">
                    <div class="d-block">
                      <h3 class="card-title">Calendario</h3>
                      <div>
                        <p class="subtitulo">
                          <span class="text-muted">
                            <%- datos.usuario.NOMUSU %>
                          </span>
                        </p>
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-2">
                    <div class="row">
                      <div class="col-2">
                        <div class="mb-1">
                          <select class="form-select" id="cboyea" value="">
                            <option value="<%- new Date().getFullYear() %>">
                              <%- new Date().getFullYear() %>
                            </option>
                            <option value="<%- new Date().getFullYear() +1 %>">
                              <%- new Date().getFullYear() +1 %>
                            </option>
                          </select>
                        </div>
                      </div>
                      <div class="col-4">
                        <div class="mb-1">
                          <div class="input-control">
                            <select class="form-select form-control" id="cboest" value="">
                              <option value="0">SELECCIONE ESTADO</option>
                              <% datos.arrTiposEstado.map(element=> { %>
                                <option value="<%- element.ID %>" data-foo="<%- element.COLOR %>">
                                  <%- element.DES %>
                                </option>
                                <% }) %>
                            </select>
                            <div class="invalid-feedback"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div id="calendar" class="form-control"></div>
                  </div>
                  <div class="card-footer p-2">
                    <div class="d-flex">
                      <a href="/admin/calendarios" class="btn btn-link">Cancelar</a>
                      <button type="submit" class="btn btn-primary ms-auto" id="btnUpdate">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" height="24" width="24" viewBox="0 0 24 24"
                          stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                          <path stroke-width=".4" fill="none"
                            d="M11.025 19.575H5.9q-.65 0-1.062-.412-.413-.413-.413-1.038V5.875q0-.65.413-1.063.412-.412.987-.412h4.8q.1-.5.463-.838.362-.337.887-.337t.888.337q.362.338.462.838h4.8q.65 0 1.063.412.412.413.412 1.063V10h-.65V5.85q0-.3-.25-.55-.25-.25-.55-.25h-2.525v1.925H8.4V5.05H5.875q-.3 0-.55.25-.25.25-.25.55v12.275q0 .3.25.55.25.25.55.25h5.15Zm4.45-.675L12.2 15.6l.45-.45 2.825 2.825 5.65-5.65.475.45ZM12 5.3q.325 0 .525-.212.2-.213.2-.513 0-.3-.212-.513-.213-.212-.488-.212-.325 0-.525.212-.2.213-.2.513 0 .3.2.513.2.212.5.212Z" />
                        </svg>
                        Actualizar cambios
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <%- include('../../partials/footer') %>
  </div>
  <div class="modal modal-blur fade" id="modal-form" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container-xl">
      <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body p-0">
            <div class="card-body">
              <div class="row">
                <div class="col-6">
                  <div class="mb-1">
                    <div class="form-label">Desde</div>
                    <input type="date" id="desfec" name="desfec" class="form-control">
                  </div>
                </div>
                <div class="col-6">
                  <div class="mb-1">
                    <div class="form-label">Hasta</div>
                    <input type="date" id="hasfec" name="hasfec" class="form-control">
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-6">
                  <div class="mb-1">
                    <div class="form-label">Desde hora</div>
                    <input type="time" id="deshor" name="deshor" class="form-control" min="08:00" max="20:00">
                  </div>
                </div>
                <div class="col-6">
                  <div class="mb-1">
                    <div class="form-label">Hasta hora</div>
                    <input type="time" id="hashor" name="hashor" class="form-control" min="08:00" max="20:00">
                  </div>
                </div>
                <div class="input-control">
                  <input type="hidden" id="msgfor" name="msgfor" class="form-control">
                  <div class="invalid-feedback"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-link" id="btnHorasCancel" data-bs-dismiss="modal"
              aria-label="Close">Cancelar</button>
            <button type="button" class="btn btn-primary ms-auto" onclick="eventoRango()">Aceptar</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="modal modal-blur fade" id="modal-evnts" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container-xl">
      <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body">
            <div class="card-body">
              <table class="table table-vcenter table-striped" id="tblEventos">
                <thead>
                  <tr class="header">
                    <th>Evento</th>
                    <th class="w-4"></th>
                  </tr>
                </thead>
                <tbody id="table-body">
                </tbody>
              </table>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-link" id="btnEventCancel" data-bs-dismiss="modal"
              aria-label="Close">Cancelar</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="modal modal-blur fade" id="modal-solape" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container-xl">
      <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body">
            <div class="modal-title">Solape de eventos</div>
            <div>Hay un evento previo en esta fecha</div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-link" id="btnSolapeAcept" data-bs-dismiss="modal"
              aria-label="Close">Aceptar</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/js/ayuda.min.js"></script>
  <script src="/js/js-year-calendar.js"></script>
  <script src="/js/js-year-calendar.es.js"></script>
  <script>
    const dateISOToUTCString = (dateISO) => {
      const fecha = new Date(dateISO);
      const userTimezoneOffset = fecha.getTimezoneOffset() * 60000;

      return new Date(fecha.getTime() - userTimezoneOffset).toISOString().slice(0, 10);
    }
    const confirm = () => {
      document.getElementById("eventos").value = JSON.stringify(eventos)
      return true
    }
    const setSuccess = (element) => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.invalid-feedback');

      errorDisplay.innerText = '';
      inputControl.classList.add('is-valid');
      element.classList.remove('is-invalid');
    }
    const setError = (element, message) => {
      const inputControl = element.parentElement;
      const errorDisplay = inputControl.querySelector('.invalid-feedback');

      errorDisplay.innerText = message;
      element.classList.add('is-invalid');
      inputControl.classList.remove('is-valid');
    }
    const isInRange = (value, range) => {
      return (value >= range[0] && value <= range[1])
    }
    const eventoRango = async () => {
      const deshor = document.getElementById('deshor').value
      const hashor = document.getElementById('hashor').value
      const element = document.getElementById('msgfor')
      const desde = document.getElementById('desfec').value
      const hasta = document.getElementById('hasfec').value

      let haySolape = false
      let arrFechas = []

      // solapes
      for (let day = new Date(desde); day <= new Date(hasta); day.setDate(day.getDate() + 1)) {
        dataSource.filter(itm => {
          if (itm.startDate === day.toISOString().slice(0, 10)) {
            arrFechas.push(itm)
          }
        })
        if (arrFechas.length > 0) break
      }

      if (arrFechas.length > 0) {
        arrFechas.every(itm => {
          let rango = [itm.deshor, itm.hashor]
          if (isInRange(deshor, rango) || isInRange(hashor, rango)) {
            haySolape = true

            setError(element, `Solape de eventos el día ${itm.startDate.split("-").reverse().join("-")} ${deshor}`)
            setTimeout(function () {
              setSuccess(element)
            }, 3000)

            return false
          }

          return true
        });
      }
      
      if (!haySolape) {
        // insert rango
        for (let day = new Date(desde); day <= new Date(hasta); day.setDate(day.getDate() + 1)) {
          const dia = dateISOToUTCString(day)

          if (festivos.indexOf(dia) < 0 && day.getDay() !== 0 && day.getDay() !== 6) {
            const id = -(Date.now())

            dataSource.push({
              idesta: id,
              tipest: params.tipo,
              startDate: dia,
              endDate: dia,
              rangoH: `${params.nombre} (${deshor} a ${hashor})`,
              color: params.color,
              deshor: deshor,
              hashor: hashor,
            })
            eventos.push({
              idesta: id,
              fecest: dia,
              tipest: params.tipo,
              deshor: `+00 ${deshor}:00`,
              hashor: `+00 ${hashor}:00`,
            })
          }
        }

        getEstadosTipo(params.tipo)

        document.getElementById('modal-form').style.display = 'none'
      }
    }
    const getEstadosTipo = (tipo) => {
      const estadosTipo = tipo === 0 ? dataSource : dataSource.filter(itm => itm.tipest === tipo)
      let data = []

      estadosTipo.map(itm => {
        data.push({
          idesta: itm.idesta,
          tipest: itm.tipest,
          startDate: new Date(itm.startDate),
          endDate: new Date(itm.endDate),
          rangoH: itm.rangoH,
          color: itm.color,
          deshor: itm.deshor,
          hashor: itm.hashor,          
        })
      })
      calendario.setDataSource(data)
    }
    const editEvento = (e) => {
      const fecha = dateISOToUTCString(e.date)

      const modalForm = document.getElementById('modal-form')
      document.getElementById('desfec').value = fecha
      document.getElementById('hasfec').value = fecha

      if (params.tipo === <%- datos.tiposEstado.baja.ID %>) {
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "14:00"
      } else if (params.tipo === <%- datos.tiposEstado.formacion.ID %>) {
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "14:00"
      } else if (params.tipo === <%- datos.tiposEstado.conciliacion.ID %>) {
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "09:30"
      } else if (params.tipo === <%- datos.tiposEstado.reunion.ID %>) {
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "14:00"
      } else if (params.tipo === <%- datos.tiposEstado.horas.ID %>) {
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "14:00"
      } else if (params.tipo === <%- datos.tiposEstado.telefono.ID %>) {
        document.getElementById('deshor').value = "08:30"
        document.getElementById('hashor').value = "14:00"
      }

      modalForm.style.display = 'flex'
    }    
    const validate = (ele, msg) => {
      if (ele.value === '0') {
        setError(ele, msg)
        setTimeout(function () {
          setSuccess(ele)
        }, 3000)
        return false
      }
    }
    const deleteMenuEvent = async (id) => {
      if (id < 0) {
        let pos = eventos.map(itm => itm.idesta).indexOf(id)
        eventos.splice(pos, 1)
      } else {
        eventos.push({
          idesta: id,
          fecest: '',
          tipest: 0,
          deshor: '',
          hashor: '',
        })
      }

      pos = dataSource.map(itm => itm.idesta).indexOf(id)
      dataSource.splice(pos, 1)

      let data = []
      dataSource.map(itm => {
        data.push({
          idesta: itm.idesta,
          tipest: itm.tipest,
          startDate: new Date(itm.startDate),
          endDate: new Date(itm.endDate),
          rangoH: itm.rangoH,
          color: itm.color,
          deshor: itm.deshor,
          hashor: itm.hashor,
        })
      })
      calendario.setDataSource(data)

      document.getElementById('btnEventCancel').click()
    }
    const colores = <%- JSON.stringify(datos.arrColoresEstado) %>
    const festivos = <%- datos.festivos %>

    let eventos = []
    let dataSource = <%- datos.dataSource %>
    let calendario = null
    let currentYear = new Date().getFullYear()
    let params = {
      fecha: new Date().toISOString().slice(0, 10),
      nombre: '',
      tipo: 0,
      color: '',
      desde: dateISOToUTCString(`${currentYear}-01-01T00:00:00`),
      hasta: dateISOToUTCString(`${currentYear}-12-31T00:00:00`),
    }

    calendario = new Calendar("#calendar", {
      minDate: new Date(params.desde),
      maxDate: new Date(params.hasta),
      language: "es",
      displayHeader: false,
      mouseOnDay: function (e) {
        if (e.events.length > 0) {
          let content = '';

          e.events.forEach(element => {
            content += element.rangoH + '\n'
          })

          e.element.setAttribute('data-bs-trigger', 'hover')
          e.element.setAttribute('data-bs-toggle', 'popover')
          e.element.setAttribute('title', content)
        }
      },
      customDayRenderer: function (e, date) {
        const fecha = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 10)
        if (e.parentElement.classList.contains('festivo')) {
          e.parentElement.classList.remove('festivo')
        }
        if (festivos.indexOf(fecha) !== -1) {
          e.style.color = '<%- datos.tiposEstado.festivo.COLOR %>'
          e.parentElement.classList.add('festivo')
        }
        if (date.getDay() === 0) {
          e.style.color = '<%- datos.tiposEstado.festivo.COLOR %>'
        }
      },
      dataSource: function () {
        return dataSource.map(itm => ({
          idesta: itm.idesta,
          tipest: itm.tipest,
          startDate: new Date(itm.startDate),
          endDate: new Date(itm.endDate),
          rangoH: itm.rangoH,
          color: itm.color,
          deshor: itm.deshor,
          hashor: itm.hashor,
        }))
      },
    })
    calendario.setYear(currentYear)
    
    // eventos modal
    document.getElementById('btnHorasCancel').addEventListener('click', function () {
      document.getElementById('modal-form').style.display = 'none'
    })
    document.getElementById('btnEventCancel').addEventListener('click', function () {
      document.getElementById('modal-evnts').style.display = 'none'
    })
    document.getElementById('btnSolapeAcept').addEventListener('click', function () {
      document.getElementById('modal-solape').style.display = 'none'
    })
    
    // evento keydown
    document.addEventListener('keydown', function (e) {
      const modalForm = document.getElementById('modal-form')
      const modalEvent = document.getElementById('modal-evnts')
      const modalSolape = document.getElementById('modal-solape')
      const keyCode = e.keyCode;

      if (keyCode === 27 && modalForm.style.display === 'flex') {
        modalBaja.style.display = 'none'
      } else if (keyCode === 27 && modalEvent.style.display === 'flex') {
        modalEvent.style.display = 'none'
      } else if (keyCode === 27 && modalSolape.style.display === 'flex') {
        modalSolape.style.display = 'none'
      }
    })

    // eventos form
    document.getElementById('cboyea').addEventListener('change', function () {
      currentYear = parseInt(document.querySelector("#cboyea").value)

      params.desde = dateISOToUTCString(`${currentYear}-01-01T00:00:00`)
      params.hasta = dateISOToUTCString(`${currentYear}-12-31T00:00:00`)

      calendario.setMinDate(new Date(params.desde));
      calendario.setMaxDate(new Date(params.hasta));
      calendario.setYear(currentYear)

      getEstadosTipo(params.tipo)
    });
    document.getElementById('cboest').addEventListener('change', function () {
      params.color = document.getElementById("cboest").options[document.getElementById("cboest").selectedIndex].getAttribute('data-foo')
      params.tipo = parseInt(this.value)
      params.nombre = this.options[this.selectedIndex].text

      getEstadosTipo(params.tipo)
    });
    document.querySelector('#calendar').addEventListener('clickDay', async function (e) {
      // bloquear festivos
      if (e.element.classList.contains('domingo')) {
        return
      }

      // bloquear si no existe destino
      if (e.events.length === 0 &&
        params.tipo === 0) {
        validate(document.getElementById('cboest'), 'Estado requerido')
        return
      }

      // evento por rango
      if (e.events.length === 0 &&
        (params.tipo === <%- datos.tiposEstado.baja.ID %> ||
          params.tipo === <%- datos.tiposEstado.formacion.ID %> ||
          params.tipo === <%- datos.tiposEstado.conciliacion.ID %> ||
          params.tipo === <%- datos.tiposEstado.reunion.ID %> ||
          params.tipo === <%- datos.tiposEstado.horas.ID %> ||
          params.tipo === <%- datos.tiposEstado.telefono.ID %>)) {
        editEvento(e)
        return
      }

      if (e.events.length) {
        if (e.events.length > 1) {
          const modalEvent = document.getElementById('modal-evnts')
          const tbl = document.getElementById("table-body")
          let innerT = ''

          tbl.innerHTML = innerT;
          // eventos
          for (let i = 0; i < e.events.length; i++) {
            innerT += `<tr>
              <td>
                <div class="d-flex py-1 align-items-center">
                  <div class="flex-fill">
                    <div class="font-weight-medium" style="color: ${colores[e.events[i].tipest].COLOR}">${colores[e.events[i].tipest].DES}</div>
                  </div>
                </div>
              </td>
              <td class="w-4">
                <div class="py-1 align-items-center">
                  <a href="#" class="nav-link" onclick="deleteMenuEvent(${e.events[i].idesta})">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" height="24" width="24" viewBox="0 0 24 24" stroke="currentColor" fill="none"><path stroke-width=".4" fill="none" d="M7.85 19.575q-.6 0-1.025-.425-.425-.425-.425-1.025v-12.1h-.975V5.4h3.6v-.675H15V5.4h3.6v.625h-.975V18.15q0 .6-.425 1.013-.425.412-1.025.412Zm9.125-13.55H7.05v12.1q0 .35.225.575.225.225.575.225h8.325q.3 0 .55-.25.25-.25.25-.55Zm-6.85 10.925h.625V8h-.625Zm3.15 0h.625V8h-.625ZM7.05 6.025V18.925 18.125Z"/></svg>
                  </a>
                </div>
              </td>
            </tr>`
          }

          tbl.innerHTML += innerT;

          modalEvent.style.display = 'flex'
        } else {          
          // borrar
          if (e.events[0].idesta < 0) {
            let pos = eventos.map(itm => itm.idesta).indexOf(e.events[0].idesta);
            eventos.splice(pos,1)
          } else {
            eventos.push({
              idesta: e.events[0].idesta,
              fecest: '',
              tipest: 0,
              deshor: '',
              hashor: '',
            })
          }

          pos = dataSource.map(itm => itm.idesta).indexOf(e.events[0].idesta);
          dataSource.splice(pos,1)

          let data = []
          dataSource.map(itm => {
            data.push({
              idesta: itm.idesta,
              tipest: itm.tipest,
              startDate: new Date(itm.startDate),
              endDate: new Date(itm.endDate),
              rangoH: itm.rangoH,
              color: itm.color,
              deshor: itm.deshor,
              hashor: itm.hashor,
            })
          })
          calendario.setDataSource(data, {
            preventRendering: false
          })

          // actualizar dia
          e.element.attributes.removeNamedItem("style")
        }
      } else {
        // solapes
        const result = dataSource.find(itm => itm.startDate === params.fecha)
        if (result) {
          const modalSolape = document.getElementById('modal-solape')

          e.element.setAttribute('data-bs-trigger', 'hover')
          e.element.setAttribute('data-bs-toggle', 'popover')
          e.element.setAttribute('title', 'Solape de eventos')

          modalSolape.style.display = 'flex'
          return
        }

        params.fecha = dateISOToUTCString(e.date)
        const id = -(Date.now())
        // insertar
        dataSource.push({
          idesta: id,
          tipest: params.tipo,
          startDate: new Date(params.fecha),
          endDate: new Date(params.fecha),
          rangoH: `${params.nombre} (08:30 a 14:00)`,
          color: params.color,
        })
        eventos.push({
          idesta: id,
          fecest: params.fecha,
          tipest: params.tipo,
          deshor: '+00 08:30:00',
          hashor: '+00 14:00:00',
        })

        calendario.setDataSource(dataSource, {
          preventRendering: false
        })

        // actualizar dia
        e.element.style.boxShadow = params.color + ' 0px -4px 0px 0px inset'
      }
    })
</script>
</body>

</html>