<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Calendario Festivos</title>
  <link rel="icon" href="/img/favicon.ico" type="image/x-icon">
  <!-- styles -->
  <link rel="stylesheet" href="/css/styles.css">
  <link rel='stylesheet' href='/css/js-year-calendar.min.css'>
  <style>
    .calendar-header {
      border: none !important;
    }
  </style>
</head>

<body class="antialiased">
  <div class="wrapper">
    <%- include('../../partials/header') %>
    <%- include('../../partials/navbar', {opcion: 'ADMINISTRACION' }) %>
    <div class="page-wrapper">
      <div class="page-body">
        <div class="container-xl">
          <div class="row">
            <div class="col-12">
              <div class="card mt-1">
                  <input type="hidden" name="idusua" id="idusua" value="">
                  <input type="hidden" name="tipest" id="tipest" value="">
                  <div class="card-header">
                    <h3 class="card-title">Calendario Festivos</h3>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-2">
                        <div class="mb-1">
                          <div class="form-label">AÃ±o</div>
                          <select class="form-select" id="cboyea" value="">
                            <option value="<%- new Date().getFullYear() %>">
                              <%- new Date().getFullYear() %>
                            </option>
                            <option value="<%- new Date().getFullYear() +1 %>">
                              <%- new Date().getFullYear() +1 %>
                            </option>
                          </select>
                        </div>
                      </div>
                      <div class="col-3">
                        <div class="mb-1">
                          <div class="form-label">Oficina</div>
                          <select class="form-select" id="cboofi" name="ofiusu" value="">
                            <option value="0" selected>
                              FESTIVOS COMUNES
                            </option>
                            <% datos.oficinas.map(element=> { %>
                            <option value="<%- element.IDOFIC %>">
                              <%- element.DESOFI %>
                            </option>
                            <% }) %>
                          </select>
                        </div>
                      </div>
                    </div>
                    <div id="calendar" class="form-control"></div>
                  </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <%- include('../../partials/footer') %>
  </div>

  <script src="/js/ayuda.min.js"></script>
  <script src="/js/js-year-calendar.js"></script>
  <script src="/js/js-year-calendar.es.js"></script>
  <script>
    async function insertEvento(evento) {
      let xhr = new XMLHttpRequest()

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {
              const result = JSON.parse(xhr.response)

              resolve(result)
            }
          }
        }

        xhr.open('POST', `http://${serverAPI}:8200/api/festivos/insert`, true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify(evento))
      })
    }
    async function deleteEvento(evento) {
      const xhr = new XMLHttpRequest()

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {
              resolve(evento)
            }
          }
        }

        xhr.open('POST', `http://${serverAPI}:8200/api/festivos/delete`, true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify(evento))
      })
    }
    async function getFestivosWithPromise(prms) {
      var xhr = new XMLHttpRequest();

      return new Promise(function(resolve, reject) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status !== 200) {
              reject("Error, status code = " + xhr.status)
            } else {
              resolve(JSON.parse(xhr.response))
            }
          }
        }

        xhr.open('POST', `http://${serverAPI}:8200/api/festivos/locales`, true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8')
        xhr.send(JSON.stringify(prms))
      })
    }
    async function getFestivos(prms) {
      estados = await getFestivosWithPromise(prms)

      let data = []

      estados.map(itm => {
        const estado = {
          idfest: itm.IDFEST,
          id: itm.IDFEST,
          startDate: new Date(itm.FECFES),
          endDate: new Date(itm.FECFES),
          color: '#FF0000',
        }
        data.push(estado)
      })

      calendario.setDataSource(data)
    }
    const dateISOToUTCString = (dateISO) => {
      const fecha = new Date(dateISO)
      const userTimezoneOffset = fecha.getTimezoneOffset() * 60000

      return new Date(fecha.getTime() - userTimezoneOffset).toISOString().slice(0, 10)
    }
  </script>
  <script>
    const serverAPI = <%- JSON.stringify(datos.serverAPI) %>
    
    let estados = null
    let calendario = null
    let currentYear = new Date().getFullYear()    
    let fecha = dateISOToUTCString(new Date())

    let params = {
      ofifes: 0,
      desde: dateISOToUTCString(`${currentYear}-01-01T00:00:00`),
      hasta: dateISOToUTCString(`${currentYear}-12-31T00:00:00`),
    }

    calendario = new Calendar("#calendar", {
      minDate: new Date(params.desde),
      maxDate: new Date(params.hasta),
      language: "es",
    })
    calendario.setYear(currentYear)

    document.getElementById('cboyea').addEventListener('change', function() {
      currentYear = parseInt(document.querySelector("#cboyea").value)

      params.desde = dateISOToUTCString(`${currentYear}-01-01T00:00:00`)
      params.hasta = dateISOToUTCString(`${currentYear}-12-31T00:00:00`)

      calendario.setMinDate(new Date(params.desde));
      calendario.setMaxDate(new Date(params.hasta));
      calendario.setYear(currentYear)

      getFestivos(params)
    });
    document.getElementById('cboofi').addEventListener('change', function() {
      params.ofifes = parseInt(this.value)

      getFestivos(params)
    });
    document.querySelector('#calendar').addEventListener('clickDay', async function(e) {
      // bloquear festivos
      if (e.events.length > 0 &&
        e.element.classList.contains('domingo')) {
        return
      }

      if (e.element.style.boxShadow) {
        e.element.style.boxShadow = null
      } else {
        e.element.style.boxShadow = '#FF0000 0px -4px 0px 0px inset'
      }

      fecha = dateISOToUTCString(e.date.toISOString())

      if (e.events.length) {
        if (e.events[0].id !== 0) {
          const evento = {
            festivo: {
              IDFEST: e.events[0].idfest,
              OFIFES: params.ofifes,
            },
            movimiento: {
              USUMOV: <%- user.id %>,
              TIPMOV: <%- datos.tiposMovimiento.borrarFestivo %>
            }
          }

          await deleteEvento(evento).then(ret => {
            let dataSource = calendario.getDataSource()
            dataSource = dataSource.filter(itm => itm.idfest !== evento.festivo.IDFEST)
          })
        }
      } else {
        const evento = {
          festivo: {
            FECFES: fecha,
            OFIFES: params.ofifes,
          },
          movimiento: {
            USUMOV: <%- user.id %>,
            TIPMOV: <%- datos.tiposMovimiento.crearFestivo %>
          }
        }

        await insertEvento(evento).then(ret => {
          // insert en el calendario
          let dataSource = calendario.getDataSource()
          const estado = {
            idfest: ret.idfest,
            id: ret.idfest,
            startDate: new Date(evento.FECFES),
            endDate: new Date(evento.FECFES),
            color: "#FF0000",
          }
          dataSource.push(estado)
        })
      }
    })

    getFestivos(params)
  </script>

</body>

</html>