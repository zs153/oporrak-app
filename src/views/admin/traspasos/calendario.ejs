<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Traspasos</title>
  <link rel="icon" href="/img/favicon.ico" type="image/x-icon" />
  <!-- styles -->
  <link rel="stylesheet" href="/css/styles.css" />
  <style>
    .calendar-header {
      border: none !important;
      margin-bottom: 0 !important;
    }
    .subtitulo {
      margin: 0;
      align-items: center;
      justify-content: center;
      color: #656d77;
      pointer-events: none;
      font-size: 0.8em;
    }
    .day {
      border: 1px solid #e6e8e9 !important;
    }
    .new,
    .old {
      border: none !important;
    }
    .calendar table.month th.day-header {
      font-size: 0.75rem;
      color: #616876;
    }
    .festivo {
      box-shadow: none !important;
    }
  </style>
</head>

<body class="antialiased">
  <div class="wrapper">
    <%- include('../../partials/header') %> 
    <%- include('../../partials/navbar', {opcion: 'TRASPASO' }) %>
    <div class="page-wrapper">
      <div class="page-body">
        <div class="container-xl">
          <div class="row">
            <div class="col-12">
              <div class="card">
                <form action="/admin/traspasos/update" method="POST" onclick="return confirm();">
                  <input type="hidden" name="usuario" id="usuario" value="" />
                  <input type="hidden" name="eventos" id="eventos" value="" />
                  <div class="card-header p-2">
                    <div class="d-block">
                      <h3 class="card-title">Traspasos</h3>
                      <div>
                        <p class="subtitulo">
                          <span class="text-muted">
                            <%- JSON.parse(datos.usuario).NOMUSU %>
                          </span>
                        </p>
                      </div>
                    </div>
                  </div>
                  <div class="card-body p-2">
                    <div class="row">
                      <div class="col-2">
                        <div class="mb-1">
                          <select class="form-select" id="cboyea" value="">
                            <option value="<%- new Date().getFullYear() %>">
                              <%- new Date().getFullYear() %>
                            </option>
                            <option value="<%- new Date().getFullYear() +1 %>">
                              <%- new Date().getFullYear() +1 %>
                            </option>
                          </select>
                        </div>
                      </div>
                      <div class="col-4">
                        <div class="mb-1">
                          <div class="input-control">
                            <select class="form-select form-control" id="cbodes" name="ofides" value="">
                              <option value="0">
                                SELECCIONE OFICINA DE DESTINO
                              </option>
                              <% datos.oficinas.map(element=> { %>
                              <option value="<%- element.IDOFIC %>">
                                <%- element.DESOFI %>
                              </option>
                              <% }) %>
                            </select>
                            <div class="invalid-feedback"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div id="calendar" class="form-control"></div>
                  </div>
                  <div class="card-footer p-2">
                    <div class="d-flex">
                      <a href="/admin/traspasos/<%- JSON.parse(datos.usuario).OFIUSU %>" class="btn btn-link">Cancelar</a>
                      <button type="submit" class="btn btn-primary ms-auto" id="btnUpdate">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" height="24" width="24" viewBox="0 0 24 24" stroke="currentColor"
                          fill="none" stroke-linecap="round" stroke-linejoin="round">
                          <path stroke-width=".4" fill="none"
                            d="M11.025 19.575H5.9q-.65 0-1.062-.412-.413-.413-.413-1.038V5.875q0-.65.413-1.063.412-.412.987-.412h4.8q.1-.5.463-.838.362-.337.887-.337t.888.337q.362.338.462.838h4.8q.65 0 1.063.412.412.413.412 1.063V10h-.65V5.85q0-.3-.25-.55-.25-.25-.55-.25h-2.525v1.925H8.4V5.05H5.875q-.3 0-.55.25-.25.25-.25.55v12.275q0 .3.25.55.25.25.55.25h5.15Zm4.45-.675L12.2 15.6l.45-.45 2.825 2.825 5.65-5.65.475.45ZM12 5.3q.325 0 .525-.212.2-.213.2-.513 0-.3-.212-.513-.213-.212-.488-.212-.325 0-.525.212-.2.213-.2.513 0 .3.2.513.2.212.5.212Z" />
                        </svg>
                        Actualizar cambios
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <%- include('../../partials/footer') %>
  </div>
  <div class="modal modal-blur fade" id="modal-solape" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="container-xl">
      <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-body">
            <div class="modal-title">Solape de eventos</div>
            <div>Hay un evento previo en esta fecha</div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-link" id="btnSolapeAcept" data-bs-dismiss="modal"
              aria-label="Close">Aceptar</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="/js/ayuda.min.js"></script>
  <script src="/js/js-year-calendar.js"></script>
  <script src="/js/js-year-calendar.es.js"></script>
  <script>
    const setSuccess = (element) => {
      const inputControl = element.parentElement
      const errorDisplay = inputControl.querySelector('.invalid-feedback')

      errorDisplay.innerText = ''
      inputControl.classList.add('is-valid')
      element.classList.remove('is-invalid')
    }
    const setError = (element, message) => {
      const inputControl = element.parentElement
      const errorDisplay = inputControl.querySelector('.invalid-feedback')

      errorDisplay.innerText = message
      element.classList.add('is-invalid')
      inputControl.classList.remove('is-valid')
    }
    const validate = (ele, msg) => {
      if (ele.value === '0') {
        setError(ele, msg)
        setTimeout(function () {
          setSuccess(ele)
        }, 3000)
        return false
      }
    }
    const dateISOToUTCString = (dateISO) => {
      const fecha = new Date(dateISO)
      const userTimezoneOffset = fecha.getTimezoneOffset() * 60000

      return new Date(fecha.getTime() - userTimezoneOffset).toISOString().slice(0, 10)
    }
    const festivoOficina = async (oficina) => {
      let estadosOficina

      // estados
      if (festivoLocal) {
        pos = festivos.map((e) => e.FECFES).indexOf(festivoLocal)
        festivos.splice(pos, 1)
      }
      
      if (oficina === 0) {
        estadosOficina = dataSource
        festivoLocal = null
      } else {
        const festivo = festivosLocal[festivosLocal.map((itm) => itm.OFIFES).indexOf(oficina)]
        estadosOficina = dataSource.filter(itm => itm.ofiest === oficina)

        festivos.push(festivo)
        festivoLocal = festivo.FECFES
      }

      let data = []
      estadosOficina.map((itm) => {
        const estado = {
          idesta: itm.idesta,
          ofiest: itm.ofiest,
          startDate: new Date(itm.startDate),
          endDate: new Date(itm.endDate),
          rangoH: itm.rangoH,
          color: itm.color,
        }
        data.push(estado)
      })
      await calendario.setDataSource(data, {
        preventRendering: true
      })
      calendario.render()

      return
    }
    const confirm = () => {
      document.getElementById("eventos").value = JSON.stringify(eventos)
      document.getElementById("usuario").value = JSON.stringify(<%- datos.usuario %>)
      return true
    }
    const festivosLocal = <%- datos.festivosLocal %>

    let dataSource = <%- datos.dataSource %>
    let festivos = <%- datos.festivosComun %>
    let eventos = []
    let festivoLocal = null
    let calendario = null
    let currentYear = new Date().getFullYear()
    let params = {
      destino: 0,
      nombre: '',
      color: '<%- datos.tiposEstado.traspaso.COLOR %>',
      desde: dateISOToUTCString(`${currentYear}-01-01T00:00:00`),
      hasta: dateISOToUTCString(`${currentYear}-12-31T00:00:00`),
    }

    calendario = new Calendar("#calendar", {
      minDate: new Date(params.desde),
      maxDate: new Date(params.hasta),
      language: "es",
      displayHeader: false,
      mouseOnDay: function (e) {
        let content = '';

        for (let i in e.events) {
          content += e.events[i].rangoH + '\n'
        }

        e.element.setAttribute('data-bs-trigger', 'hover')
        e.element.setAttribute('data-bs-toggle', 'popover')
        e.element.setAttribute('title', content)
      },
      customDayRenderer: function (e, date) {
        const fecha = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 10)
        if (e.parentElement.classList.contains('festivo')) {
          e.parentElement.classList.remove('festivo')
        }
        if (festivos.map(itm => itm.FECFES).indexOf(fecha) !== -1) {
          e.style.color = '<%- datos.tiposEstado.festivo.COLOR %>'
          e.parentElement.classList.add('festivo')
        }
        if (date.getDay() === 0) {
          e.style.color = '<%- datos.tiposEstado.festivo.COLOR %>'
        }
      },
      dataSource: function () {
        return dataSource.map(itm => ({
          idesta: itm.idesta,
          ofiest: itm.ofiest,
          startDate: new Date(itm.startDate),
          endDate: new Date(itm.endDate),
          rangoH: itm.rangoH,
          color: itm.color,
        }))
      },
    })
    calendario.setYear(currentYear)

    // eventos modal
    document.getElementById('btnSolapeAcept').addEventListener('click', function () {
      document.getElementById('modal-solape').style.display = 'none'
    })  
      
    // calendario
    document.getElementById('cboyea').addEventListener('change', function () {
      currentYear = parseInt(document.querySelector("#cboyea").value)

      params.desde = dateISOToUTCString(`${currentYear}-01-01T00:00:00`)
      params.hasta = dateISOToUTCString(`${currentYear}-12-31T00:00:00`)

      calendario.setMinDate(new Date(params.desde));
      calendario.setMaxDate(new Date(params.hasta));
      calendario.setYear(currentYear)
    });
    document.getElementById('cbodes').addEventListener('change', function () {
      params.destino = parseInt(this.value)
      params.nombre = this.options[this.selectedIndex].text

      festivoOficina(params.destino)
    });
    document.querySelector('#calendar').addEventListener('clickDay', async function (e) {
      // bloquear festivos
      if (e.element.classList.contains('domingo') || 
          e.element.classList.contains('festivo')) {
        return
      }

      // bloquear si no existe destino
      if (e.events.length === 0 && params.destino === 0) {
        validate(document.getElementById('cbodes'), 'Destino requerido')
        return
      }

      params.fecha = new Date(e.date.getTime() - (e.date.getTimezoneOffset() * 60000)).toISOString().slice(0, 10)

      if (e.events.length) {
        //eventos
        const epos = eventos.map(itm => itm.fecest).indexOf(params.fecha);
        if (epos !== -1) {
          eventos.splice(epos, 1)
        }
        if (e.events[0].idesta !== 0) {
          eventos.push({
            idesta: e.events[0].idesta,
            fecest: params.fecha,
            ofiest: params.destino,
          })
        }

        // dataSource
        const dpos = dataSource.map(itm => itm.idesta).indexOf(e.events[0].idesta);
        dataSource.splice(dpos, 1)

        let data = []
        dataSource.map((itm) => {
          const estado = {
            idesta: itm.idesta,
            ofiest: itm.ofiest,
            startDate: new Date(itm.startDate),
            endDate: new Date(itm.endDate),
            rangoH: itm.rangoH,
            color: itm.color,
          }
          data.push(estado)
        })
        calendario.setDataSource(data, {
          preventRendering: false
        })

        // actualizar dia
        e.element.attributes.removeNamedItem("style")
      } else {
        // solapes
        const result = dataSource.find(itm => itm.startDate === params.fecha)
        if (result) {
          const modalSolape = document.getElementById('modal-solape')
          e.element.setAttribute('data-bs-trigger', 'hover')
          e.element.setAttribute('data-bs-toggle', 'popover')
          e.element.setAttribute('title', 'Solape de eventos')
          modalSolape.style.display = 'flex'
          return
        }

        //eventos
        eventos.push({
          idesta: 0,
          fecest: params.fecha,
          ofiest: params.destino,
        })

        // actualiza dia calendario
        const estado = {
          idesta: 0,
          ofiest: params.destino,
          startDate: params.fecha,
          endDate: params.fecha,
          rangoH: `${params.nombre}\n(08:30 a 14:00)`,
          color: params.color,
        }
        dataSource.push(estado)

        let data = []
        dataSource.map((itm) => {
          const estado = {
            idesta: itm.idesta,
            ofiest: itm.ofiest,
            startDate: new Date(itm.startDate),
            endDate: new Date(itm.endDate),
            rangoH: itm.rangoH,
            color: itm.color,
          }
          data.push(estado)
        })
        calendario.setDataSource(data, {
          preventRendering: false
        })

        // actualizar dia
        e.element.style.boxShadow = params.color + ' 0px -4px 0px 0px inset'
      }
    })
  </script>
</body>

</html>